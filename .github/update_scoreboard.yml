name: Update Contributor Scoreboard

on:
  schedule:
    - cron: '0 0 * * *'   # Runs daily at midnight UTC
  workflow_dispatch:      # Allows manual trigger

jobs:
  update-scoreboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run scoreboard script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Create the script file
          cat << 'EOF' > update_scoreboard.py
          import requests

          OWNER = "Fewinfos"
          REPO = "github-repo-readme-stats"
          TOKEN = "${PERSONAL_ACCESS_TOKEN}"

          headers = {
              "Authorization": f"token {TOKEN}"
          }

          def get_contributors():
              url = f"https://api.github.com/repos/{OWNER}/{REPO}/contributors"
              response = requests.get(url, headers=headers)
              return response.json()

          def get_issues():
              url = f"https://api.github.com/repos/{OWNER}/{REPO}/issues?state=all&per_page=100"
              response = requests.get(url, headers=headers)
              return response.json()

          def get_pulls():
              url = f"https://api.github.com/repos/{OWNER}/{REPO}/pulls?state=all&per_page=100"
              response = requests.get(url, headers=headers)
              return response.json()

          def get_comments():
              url = f"https://api.github.com/repos/{OWNER}/{REPO}/issues/comments?per_page=100"
              response = requests.get(url, headers=headers)
              return response.json()

          def calculate_scores():
              contributors = get_contributors()
              issues = get_issues()
              pulls = get_pulls()
              comments = get_comments()

              scores = {}

              for c in contributors:
                  scores[c['login']] = {
                      "commits": c['contributions'],
                      "issues_opened": 0,
                      "prs_merged": 0,
                      "comments": 0,
                      "score": 0
                  }

              for issue in issues:
                  if 'pull_request' not in issue:
                      user = issue['user']['login']
                      if user in scores:
                          scores[user]['issues_opened'] += 1

              for pr in pulls:
                  if pr.get('merged_at') is not None:
                      user = pr['user']['login']
                      if user in scores:
                          scores[user]['prs_merged'] += 1

              for comment in comments:
                  user = comment['user']['login']
                  if user in scores:
                      scores[user]['comments'] += 1

              for user, data in scores.items():
                  total = (
                      data['commits'] * 1 +
                      data['issues_opened'] * 2 +
                      data['prs_merged'] * 5 +
                      data['comments'] * 1
                  )
                  scores[user]['score'] = total

              return scores

          def generate_markdown(scores):
              md = "# Contributor Scoreboard\n\n"
              md += "| Contributor | Commits | Issues Opened | PRs Merged | Comments | Total Score |\n"
              md += "|-------------|---------|---------------|------------|----------|-------------|\n"

              for user, data in sorted(scores.items(), key=lambda x: x[1]['score'], reverse=True):
                  md += f"| @{user} | {data['commits']} | {data['issues_opened']} | {data['prs_merged']} | {data['comments']} | {data['score']} |\n"
              return md

          if __name__ == "__main__":
              scores = calculate_scores()
              scoreboard_md = generate_markdown(scores)

              with open("CONTRIBUTOR_SCOREBOARD.md", "w") as f:
                  f.write(scoreboard_md)

          EOF

          # Run the script
          python update_scoreboard.py

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update contributor scoreboard"
          file_pattern: CONTRIBUTOR_SCOREBOARD.md
          branch: main
